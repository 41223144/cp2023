<h1>w3</h1>
<p>電腦教室網路設定</p>
<p><img alt="" height="269" src="/images/螢幕擷取畫面 2024-01-12 020751.png" width="300"/></p>
<p>舊python與新python的問題</p>
<br/>1.可以更新<code>.replit</code>文件
<h3>2.也可刪除舊的虛擬環境</h3><h1>w2</h1>
<p>在replit內讓github兩者連接</p>
<p><img alt="" height="159" src="/images/螢幕擷取畫面 2024-01-12 015902.png" width="400"/></p>
<p>這樣在replit內push的程式與內容便可在github的個人倉儲內呈現</p>
<h1>w15</h1>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// Function prototype
void draw_star(gdImagePtr img, int x, int y, int size, int color, int rotation);
void draw_proc_flag(gdImagePtr img);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width * 2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_proc_flag(img);

    FILE *outputFile = fopen("proc_flag_in_gd_w15.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, int rotation) {
    double deg = M_PI / 180.0;
    gdPoint points[10]; // Initialize array here
    int num_points = 10;

    for (int i = 0; i &lt; num_points; i++) {
        // 若沒有逆時針轉 90 度, 尖角將與水平線平行
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation * deg;
        int radius = (i % 2 == 0) ? size : size * sin(18 * deg) / cos(36 * deg);
        points[i].x = x + radius * cos(angle);
        points[i].y = y - radius * sin(angle);
    }

    gdImageFilledPolygon(img, points, num_points, color);
}

void draw_proc_flag(gdImagePtr img) {
    double deg = M_PI / 180.0;
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;
    double angle;
    // 大黃星位於 width 的 1/6 與 height 的 1/4 處
    int center_x = (int)(width / 6);
    int center_y = (int)(height / 4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 大黃星的半徑為 width 的 1/10
    int big_star_radius = (int)(width / 10);
    // 小黃星的半徑為 width 的 1/15
    int small_star_radius = (int)(width / 30);
    // 先塗上滿地紅
    red = gdImageColorAllocate(img, 238, 28, 37); // 紅色
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 畫大黃星
    draw_star(img, center_x, center_y, big_star_radius, yellow, 0);
    // 畫小黃星
    // draw_star(img, center_x, center_y, small_star_dia, yellow, 0);
    // the first small star  center_x = (width/3, width/15), angle = atan(5/3)
    center_x = (int) width/3;
    center_y = (int) width/15;
    // 第一個小黃星, 為了尖角從垂直指向大黃星的中心
    // 必須再逆時針轉以下的 angle, 也就是 atan(5/3)/deg 的補角
    angle = 180 - atan(5/3)/deg;
    draw_star(img, center_x, center_y, small_star_radius, yellow, angle);
    // the second small star
    center_x = (int) 2*width/5;
    center_y = (int) 2*width/15;
    // 第二個小黃星, 為了尖角從垂直指向大黃星的中心
    // 必須再逆時針轉以下的 angle, 也就是 atan(7/1)/deg 的補角
    angle = 180 - atan(7/1)/deg;
    draw_star(img, center_x, center_y, small_star_radius, yellow, angle);
    // the third small star
    center_x = (int) 2*width/5;
    center_y = (int) 7*width/30;
    // 第三個小黃星, 為了尖角從垂直指向大黃星的中心
    // 必須再逆時針轉以下的 angle, 也就是大小為 atan(7/2)/deg 的角度
    angle = atan(7/2)/deg;
    draw_star(img, center_x, center_y, small_star_radius, yellow, angle);
    // the fourth small star
    center_x = (int) width/3;
    center_y = (int) 3*width/10;
    // 第四個小黃星, 為了尖角從垂直指向大黃星的中心
    // 必須再逆時針轉以下的 angle, 也就是大小為 atan(5/4)/deg 的角度
    angle = atan(5/4)/deg;
    draw_star(img, center_x, center_y, small_star_radius, yellow, angle);
}</pre>
<p><img alt="" height="267" src="/images/proc_flag_in_gd_w15.png" width="400"/></p>
<h1>w12</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// Declare the rotation function
void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {
    int i;
    double angle_rad = rotation_ang * M_PI / 180.0;

    for (i = 0; i &lt; num_points; i++) {
        int x = points[i].x - x_orig;
        int y = points[i].y - y_orig;

        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));
        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));
    }
}

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("hellogd1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);

    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);

    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);
    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);
    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);

    gdPoint points[4];
    points[0].x = (int)width / 4;
    points[0].y = (int)height * 3 / 4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;

    // Call the rotation function
    rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 45.0, points, 4);
    gdImagePolygon(img, points, 4, black);

    gdPoint points2[4];
    points2[0].x = (int)width / 3;
    points2[0].y = (int)height / 2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;

    // Call the rotation function
    rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}</pre>
<p><img alt="" height="300" src="/images/hellogd1.png" width="400"/><br/><br/></p>
<div class="line number1 index0 alt2"><code class="csharp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number2 index1 alt1"><code class="csharp preprocessor">#include &lt;gd.h&gt;</code></div>
<div class="line number3 index2 alt2"><code class="csharp preprocessor">#include &lt;math.h&gt;</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="csharp comments">// Declare the rotation function</code></div>
<div class="line number6 index5 alt1"><code class="csharp keyword">void</code> <code class="csharp plain">rotateFilledPolygon(</code><code class="csharp keyword">int</code> <code class="csharp plain">x_orig, </code><code class="csharp keyword">int</code> <code class="csharp plain">y_orig, </code><code class="csharp keyword">double</code> <code class="csharp plain">rotation_ang, gdPoint *points, </code><code class="csharp keyword">int</code> <code class="csharp plain">num_points) {</code></div>
<div class="line number7 index6 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">int</code> <code class="csharp plain">i;</code></div>
<div class="line number8 index7 alt1"><code class="csharp spaces">    </code><code class="csharp keyword">double</code> <code class="csharp plain">angle_rad = rotation_ang * M_PI / 180.0;</code></div>
<div class="line number9 index8 alt2"> </div>
<div class="line number10 index9 alt1"><code class="csharp spaces">    </code><code class="csharp keyword">for</code> <code class="csharp plain">(i = 0; i &lt; num_points; i++) {</code></div>
<div class="line number11 index10 alt2"><code class="csharp spaces">        </code><code class="csharp keyword">int</code> <code class="csharp plain">x = points[i].x - x_orig;</code></div>
<div class="line number12 index11 alt1"><code class="csharp spaces">        </code><code class="csharp keyword">int</code> <code class="csharp plain">y = points[i].y - y_orig;</code></div>
<div class="line number13 index12 alt2"> </div>
<div class="line number14 index13 alt1"><code class="csharp spaces">        </code><code class="csharp plain">points[i].x = x_orig + (</code><code class="csharp keyword">int</code><code class="csharp plain">)(x * cos(angle_rad) - y * sin(angle_rad));</code></div>
<div class="line number15 index14 alt2"><code class="csharp spaces">        </code><code class="csharp plain">points[i].y = y_orig + (</code><code class="csharp keyword">int</code><code class="csharp plain">)(x * sin(angle_rad) + y * cos(angle_rad));</code></div>
<div class="line number16 index15 alt1"><code class="csharp spaces">    </code><code class="csharp plain">}</code></div>
<div class="line number17 index16 alt2"><code class="csharp plain">}</code></div>
<div class="line number18 index17 alt1"> </div>
<div class="line number19 index18 alt2"><code class="csharp keyword">int</code> <code class="csharp plain">main() {</code></div>
<div class="line number20 index19 alt1"><code class="csharp spaces">    </code><code class="csharp keyword">int</code> <code class="csharp plain">width = 800;</code></div>
<div class="line number21 index20 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">int</code> <code class="csharp plain">height = 600;</code></div>
<div class="line number22 index21 alt1"> </div>
<div class="line number23 index22 alt2"><code class="csharp spaces">    </code><code class="csharp plain">gdImagePtr img = gdImageCreateTrueColor(width, height);</code></div>
<div class="line number24 index23 alt1"><code class="csharp spaces">    </code><code class="csharp plain">gdImageAlphaBlending(img, 0);</code></div>
<div class="line number25 index24 alt2"> </div>
<div class="line number26 index25 alt1"><code class="csharp spaces">    </code><code class="csharp plain">FILE *outputFile = fopen(</code><code class="csharp string">"./../images/hellogd2.png"</code><code class="csharp plain">, </code><code class="csharp string">"wb"</code><code class="csharp plain">);</code></div>
<div class="line number27 index26 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">if</code> <code class="csharp plain">(outputFile == NULL) {</code></div>
<div class="line number28 index27 alt1"><code class="csharp spaces">        </code><code class="csharp plain">fprintf(stderr, </code><code class="csharp string">"Error opening the output file.\n"</code><code class="csharp plain">);</code></div>
<div class="line number29 index28 alt2"><code class="csharp spaces">        </code><code class="csharp keyword">return</code> <code class="csharp plain">1;</code></div>
<div class="line number30 index29 alt1"><code class="csharp spaces">    </code><code class="csharp plain">}</code></div>
<div class="line number31 index30 alt2"> </div>
<div class="line number32 index31 alt1"><code class="csharp spaces">    </code><code class="csharp keyword">int</code> <code class="csharp plain">red = gdImageColorAllocate(img, 255, 0, 0);</code></div>
<div class="line number33 index32 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">int</code> <code class="csharp plain">blue = gdImageColorAllocate(img, 0, 0, 255);</code></div>
<div class="line number34 index33 alt1"><code class="csharp spaces">    </code><code class="csharp keyword">int</code> <code class="csharp plain">black = gdImageColorAllocate(img, 0, 0, 0);</code></div>
<div class="line number35 index34 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">int</code> <code class="csharp plain">white = gdImageColorAllocate(img, 255, 255, 255);</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="csharp spaces">    </code><code class="csharp plain">gdImageFilledRectangle(img, 0, 0, width, height, white);</code></div>
<div class="line number38 index37 alt1"><code class="csharp spaces">    </code><code class="csharp plain">gdImageFilledRectangle(img, 0, 0, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 4, (</code><code class="csharp keyword">int</code><code class="csharp plain">)height / 4, blue);</code></div>
<div class="line number39 index38 alt2"> </div>
<div class="line number40 index39 alt1"><code class="csharp spaces">    </code><code class="csharp plain">gdImageFilledEllipse(img, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width * 3 / 4, (</code><code class="csharp keyword">int</code><code class="csharp plain">)height / 4, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 4, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 4, red);</code></div>
<div class="line number41 index40 alt2"><code class="csharp spaces">    </code><code class="csharp plain">gdImageEllipse(img, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width * 3 / 4, (</code><code class="csharp keyword">int</code><code class="csharp plain">)height * 3 / 4, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 4, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 4, red);</code></div>
<div class="line number42 index41 alt1"><code class="csharp spaces">    </code><code class="csharp plain">gdImageLine(img, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 2, (</code><code class="csharp keyword">int</code><code class="csharp plain">)height / 2, (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 2, (</code><code class="csharp keyword">int</code><code class="csharp plain">)height / 2 + 100, blue);</code></div>
<div class="line number43 index42 alt2"> </div>
<div class="line number44 index43 alt1"><code class="csharp spaces">    </code><code class="csharp plain">gdPoint points[4];</code></div>
<div class="line number45 index44 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points[0].x = (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 4;</code></div>
<div class="line number46 index45 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points[0].y = (</code><code class="csharp keyword">int</code><code class="csharp plain">)height * 3 / 4;</code></div>
<div class="line number47 index46 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points[1].x = points[0].x + 100;</code></div>
<div class="line number48 index47 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points[1].y = points[0].y;</code></div>
<div class="line number49 index48 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points[2].x = points[1].x;</code></div>
<div class="line number50 index49 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points[2].y = points[1].y + 100;</code></div>
<div class="line number51 index50 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points[3].x = points[2].x - 100;</code></div>
<div class="line number52 index51 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points[3].y = points[2].y;</code></div>
<div class="line number53 index52 alt2"> </div>
<div class="line number54 index53 alt1"><code class="csharp spaces">    </code><code class="csharp comments">// Call the rotation function multiple times</code></div>
<div class="line number55 index54 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">for</code> <code class="csharp plain">(</code><code class="csharp keyword">int</code> <code class="csharp plain">i = 0; i &lt; 4; i++) {</code></div>
<div class="line number56 index55 alt1"><code class="csharp spaces">        </code><code class="csharp plain">rotateFilledPolygon((</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 4 + 50, (</code><code class="csharp keyword">int</code><code class="csharp plain">)height * 3 / 4 + 50, 30.0, points, 4);</code></div>
<div class="line number57 index56 alt2"><code class="csharp spaces">        </code><code class="csharp plain">gdImagePolygon(img, points, 4, black);</code></div>
<div class="line number58 index57 alt1"><code class="csharp spaces">    </code><code class="csharp plain">}</code></div>
<div class="line number59 index58 alt2"> </div>
<div class="line number60 index59 alt1"><code class="csharp spaces">    </code><code class="csharp plain">gdPoint points2[4];</code></div>
<div class="line number61 index60 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points2[0].x = (</code><code class="csharp keyword">int</code><code class="csharp plain">)width / 3;</code></div>
<div class="line number62 index61 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points2[0].y = (</code><code class="csharp keyword">int</code><code class="csharp plain">)height / 2;</code></div>
<div class="line number63 index62 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points2[1].x = points2[0].x + 100;</code></div>
<div class="line number64 index63 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points2[1].y = points2[0].y;</code></div>
<div class="line number65 index64 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points2[2].x = points2[1].x;</code></div>
<div class="line number66 index65 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points2[2].y = points2[1].y + 100;</code></div>
<div class="line number67 index66 alt2"><code class="csharp spaces">    </code><code class="csharp plain">points2[3].x = points2[2].x - 150;</code></div>
<div class="line number68 index67 alt1"><code class="csharp spaces">    </code><code class="csharp plain">points2[3].y = points2[2].y;</code></div>
<div class="line number69 index68 alt2"> </div>
<div class="line number70 index69 alt1"><code class="csharp spaces">    </code><code class="csharp comments">// Call the rotation function multiple times</code></div>
<div class="line number71 index70 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">for</code> <code class="csharp plain">(</code><code class="csharp keyword">int</code> <code class="csharp plain">i = 0; i &lt; 12; i++) {</code></div>
<div class="line number72 index71 alt1"><code class="csharp spaces">        </code><code class="csharp comments">//rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);</code></div>
<div class="line number73 index72 alt2"><code class="csharp spaces">        </code><code class="csharp plain">rotateFilledPolygon(500, 200, 30.0, points2, 4);</code></div>
<div class="line number74 index73 alt1"><code class="csharp spaces">        </code><code class="csharp plain">gdImageFilledPolygon(img, points2, 4, red);</code></div>
<div class="line number75 index74 alt2"><code class="csharp spaces">    </code><code class="csharp plain">}</code></div>
<div class="line number76 index75 alt1"> </div>
<div class="line number77 index76 alt2"><code class="csharp spaces">    </code><code class="csharp plain">gdImagePngEx(img, outputFile, 9);</code></div>
<div class="line number78 index77 alt1"><code class="csharp spaces">    </code><code class="csharp plain">fclose(outputFile);</code></div>
<div class="line number79 index78 alt2"><code class="csharp spaces">    </code><code class="csharp plain">gdImageDestroy(img);</code></div>
<div class="line number80 index79 alt1"> </div>
<div class="line number81 index80 alt2"><code class="csharp spaces">    </code><code class="csharp keyword">return</code> <code class="csharp plain">0;</code></div>
<div class="line number82 index81 alt1"><code class="csharp plain">}</code></div>
<p></p>
<h1>w14</h1>
<p></p>
<h2>korena</h2>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_South_Korea
// https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// Function prototype
void draw_korean_flag(gdImagePtr img);

int main() {
    // width 3: height 2
    int width = 1200;
    // ��𧢲�烾𩑈撖祆�𠉛�� 72:48 = 12:8 = 3:2
    int height = (int)(width * 2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_korean_flag(img);

    FILE *outputFile = fopen("korean_flag_in_gd_w15_step1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_korean_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, blue, black, grey, white;
    // according to https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg
    double scale = width/72;
    int big_circle_dia = (int)24*scale;
    int small_circle_dia = (int) big_circle_dia/2;
    double rot_ang = atan2(48.0, 72.0);
    int center_x = (int)(width / 2);
    int center_y = (int)(height / 2);
    printf("small_circle_dia is %d\n", small_circle_dia);
    int left_center_x = center_x - (small_circle_dia/2)*cos(rot_ang);
    printf("center_x is %d\n", center_x);
    printf("atan2(48.0, 72.0) is %f\n", atan2(48.0, 72.0));
    printf("left_center_x is %d\n", left_center_x);
    int left_center_y = center_y - (small_circle_dia/2)*sin(rot_ang);
    int right_center_x = center_x + (small_circle_dia/2)*cos(rot_ang);
    int right_center_y = center_y + (small_circle_dia/2)*sin(rot_ang);

    red = gdImageColorAllocate(img, 255, 0, 0);      // Red
    blue = gdImageColorAllocate(img, 0, 0, 255);     // Blue
    black = gdImageColorAllocate(img, 0, 0, 0);      // Black
    grey = gdImageColorAllocate(img, 125, 125, 125); // grey
    white = gdImageColorAllocate(img, 255, 255, 255); // white

    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageRectangle(img, 0, 0, width, height, black);

    // Draw the big circle outline
    int circle_radius = (int)(height * 2.0 / 5.0);
    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, black);
    // left small circle
    gdImageEllipse(img, left_center_x, left_center_y, small_circle_dia, small_circle_dia, red);
    // right small circle
    gdImageEllipse(img, right_center_x, right_center_y, small_circle_dia, small_circle_dia, blue);
}</pre>
<p><img alt="" height="267" src="/images/korean_flag_in_gd_w15_step1.png" width="400"/><br/><br/></p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_South_Korea
// https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// Function prototype
void draw_korean_flag(gdImagePtr img);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 72:48 = 12:8 = 3:2
    int height = (int)(width * 2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_korean_flag(img);

    FILE *outputFile = fopen("korean_flag_in_gd_w15_step2.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_korean_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, blue, black, grey, white;
    // according to https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg
    double scale = width/72;
    int big_circle_dia = (int)24*scale;
    int small_circle_dia = (int) big_circle_dia/2;
    double rot_ang = atan2(48.0, 72.0);
    int center_x = (int)(width / 2);
    int center_y = (int)(height / 2);
    printf("small_circle_dia is %d\n", small_circle_dia);
    int left_center_x = center_x - (small_circle_dia/2)*cos(rot_ang);
    printf("center_x is %d\n", center_x);
    printf("atan2(48.0, 72.0) is %f\n", atan2(48.0, 72.0));
    printf("left_center_x is %d\n", left_center_x);
    int left_center_y = center_y - (small_circle_dia/2)*sin(rot_ang);
    int right_center_x = center_x + (small_circle_dia/2)*cos(rot_ang);
    int right_center_y = center_y + (small_circle_dia/2)*sin(rot_ang);

    red = gdImageColorAllocate(img, 255, 0, 0);      // Red
    blue = gdImageColorAllocate(img, 0, 0, 255);     // Blue
    black = gdImageColorAllocate(img, 0, 0, 0);      // Black
    grey = gdImageColorAllocate(img, 125, 125, 125); // grey
    white = gdImageColorAllocate(img, 255, 255, 255); // white

    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageRectangle(img, 0, 0, width, height, black);

    // Draw the big circle outline
    int circle_radius = (int)(height * 2.0 / 5.0);
    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, black);
    // left small circle
    gdImageEllipse(img, left_center_x, left_center_y, small_circle_dia, small_circle_dia, red);
    // right small circle
    gdImageEllipse(img, right_center_x, right_center_y, small_circle_dia, small_circle_dia, blue);
    gdImageFill(img, left_center_x, left_center_y, red); // Fill left small circle with red
    gdImageFill(img, right_center_x, right_center_y - small_circle_dia/2-10, red);
    gdImageFill(img, right_center_x, right_center_y, blue); // Fill right small circle with blue
    gdImageFill(img, left_center_x, left_center_y + small_circle_dia/2+10, blue);
    // 用白色蓋掉先前的大圓黑線
    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, white);

    // 接下來只要改變三個圓的邊框顏色, 並且利用 gdImageFill 對特定區域塗色
    // 應該就可以完成韓國國旗中間的紅藍區域圖案

    /*
    // Draw the second circle outline
    gdImageEllipse(img, center_x + circle_radius / 2, center_y, circle_radius * 2, circle_radius * 2, black);

    // Flood fill the left area with red
    gdImageFill(img, center_x - circle_radius + 1, center_y, red);

    // Flood fill the right area with blue
    gdImageFill(img, center_x + circle_radius + 1, center_y, blue);

    // Flood fill the intersection area with yellow
    gdImageFill(img, center_x, center_y, yellow);
    */
}</pre>
<p><img alt="" height="267" src="/images/korean_flag_in_gd_w15_step2.png" width="400"/></p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_South_Korea
// https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

// Function prototype
void draw_korean_flag(gdImagePtr img);

// Declare the rotation function
void rotatePoints(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {
    int i;
    double angle_rad = rotation_ang * M_PI / 180.0;

    for (i = 0; i &lt; num_points; i++) {
        int x = points[i].x - x_orig;
        int y = points[i].y - y_orig;

        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));
        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));
    }
}

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 72:48 = 12:8 = 3:2
    int height = (int)(width * 2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_korean_flag(img);

    FILE *outputFile = fopen("korean_flag_in_gd_w15_step2.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_korean_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, blue, black, grey, white;
    // according to https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg
    double scale = width/72;
    int big_circle_dia = (int)24*scale;
    int small_circle_dia = (int) big_circle_dia/2;
    // left small circle rotated angle is rot_ang
    double rot_ang = atan2(48.0, 72.0);
    // rectangle rotated angle is rot_ang2;
    double rot_ang2 = atan2(72.0, 48.0);
    double degree = M_PI/180.0;
    int center_x = (int)(width / 2);
    int center_y = (int)(height / 2);
    gdPoint points[4];
    // for upper rectangle
    int rect_lower_left_x = center_x - (int)6*scale;
    int rect_lower_right_x = center_x + (int)6*scale;
    int rect_upper_left_x = rect_lower_left_x;
    int rect_upper_right_x = rect_lower_right_x;
    int rect_lower_left_y = center_y - (int)18*scale;
    int rect_lower_right_y = rect_lower_left_y;
    int rect_upper_left_y = rect_lower_left_y - (int)8*scale;
    int rect_upper_right_y = rect_upper_left_y;
    // get points
    points[0].x = rect_lower_left_x;
    points[0].y = rect_lower_left_y;
    points[1].x = rect_upper_left_x;
    points[1].y = rect_upper_left_y;
    points[2].x = rect_upper_right_x;
    points[2].y = rect_upper_right_y;
    points[3].x = rect_lower_right_x;
    points[3].y = rect_lower_right_y;

    printf("small_circle_dia is %d\n", small_circle_dia);
    int left_center_x = center_x - (small_circle_dia/2)*cos(rot_ang);
    printf("center_x is %d\n", center_x);
    printf("atan2(48.0, 72.0) is %f\n", atan2(48.0, 72.0));
    printf("left_center_x is %d\n", left_center_x);
    int left_center_y = center_y - (small_circle_dia/2)*sin(rot_ang);
    int right_center_x = center_x + (small_circle_dia/2)*cos(rot_ang);
    int right_center_y = center_y + (small_circle_dia/2)*sin(rot_ang);

    red = gdImageColorAllocate(img, 255, 0, 0);      // Red
    blue = gdImageColorAllocate(img, 0, 0, 255);     // Blue
    black = gdImageColorAllocate(img, 0, 0, 0);      // Black
    grey = gdImageColorAllocate(img, 125, 125, 125); // grey
    white = gdImageColorAllocate(img, 255, 255, 255); // white

    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageRectangle(img, 0, 0, width, height, black);
    
    // rectangle rotate to upper right
    rotatePoints(center_x, center_y, rot_ang2/degree, points, 4);
    gdImageFilledPolygon(img, points, 4, grey);
    //printf("rot_ang/degree is %f\n", rot_ang2/degree);
    // rectangle rotate to upper left
    rotatePoints(center_x, center_y, -2*rot_ang2/degree, points, 4);
    gdImageFilledPolygon(img, points, 4, grey);
    // rectangle rotate to lower ritht
    rotatePoints(center_x, center_y, - 2*rot_ang/degree, points, 4);
    gdImageFilledPolygon(img, points, 4, grey);
    // rectangle rotate to lower left
    rotatePoints(center_x, center_y, -2*rot_ang2/degree, points, 4);
    gdImageFilledPolygon(img, points, 4, grey);
    // Draw upper rectagle four lines
    /*
    gdImageLine(img, rect_lower_left_x, rect_lower_left_y, rect_upper_left_x, rect_upper_left_y, grey);
    gdImageLine(img, rect_lower_right_x, rect_lower_right_y, rect_upper_right_x, rect_upper_right_y, grey);
    gdImageLine(img, rect_lower_left_x, rect_lower_left_y, rect_lower_right_x, rect_lower_right_y, grey);
    gdImageLine(img, rect_upper_left_x, rect_upper_left_y, rect_upper_left_x, rect_upper_left_y, grey);
    */
    // Draw the big circle outline
    int circle_radius = (int)(height * 2.0 / 5.0);
    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, black);
    // left small circle
    gdImageEllipse(img, left_center_x, left_center_y, small_circle_dia, small_circle_dia, red);
    // right small circle
    gdImageEllipse(img, right_center_x, right_center_y, small_circle_dia, small_circle_dia, blue);
    gdImageFill(img, left_center_x, left_center_y, red); // Fill left small circle with red
    gdImageFill(img, right_center_x, right_center_y - small_circle_dia/2-10, red);
    gdImageFill(img, right_center_x, right_center_y, blue); // Fill right small circle with blue
    gdImageFill(img, left_center_x, left_center_y + small_circle_dia/2+10, blue);
    // 用白色蓋掉先前的大圓黑線
    gdImageEllipse(img, center_x, center_y, big_circle_dia, big_circle_dia, white);
    
    // 接下來只要改變三個圓的邊框顏色, 並且利用 gdImageFill 對特定區域塗色
    // 應該就可以完成韓國國旗中間的紅藍區域圖案

    /*
    // Draw the second circle outline
    gdImageEllipse(img, center_x + circle_radius / 2, center_y, circle_radius * 2, circle_radius * 2, black);

    // Flood fill the left area with red
    gdImageFill(img, center_x - circle_radius + 1, center_y, red);

    // Flood fill the right area with blue
    gdImageFill(img, center_x + circle_radius + 1, center_y, blue);

    // Flood fill the intersection area with yellow
    gdImageFill(img, center_x, center_y, yellow);
    */
}</pre>
<p><img alt="" height="267" src="/images/korean_flag3_in_gd_w15_step2.png" width="400"/></p>
<h1>w13</h1>
<p>雖然上課聽不太懂，但回家研究後了解到gitHub是用來儲存大量程式，方便整理出儲存在內的程式</p>
<p>也了解到如何用Repilt去寫程式來做圖型，這部分因為是自己上網查的，依靠changpt也了解到如何去解讀畫出來的圖形</p>
<p>知道顏色需要用RGB三原色去編成各種顏色從0-255去設定顏色等級</p>
<p>要畫出四邊形或三角形時需要先用gdPoint points[4];去定義這圖型有幾個點再用第一點的座標開始延伸出點2點3點4畫出多邊形。</p>
<p>圓形則是在python內先定義<span class="hljs-keyword">import</span><span> turtle在設定t = turtle.Turtle()最後用turtle.mainloop()讓其顯示在視窗</span></p>
<p><span></span></p>
<h1>w6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<p><img alt="" height="400" src="/images/roc_flag_in_gd.png" width="599"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 国旗颜色
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 计算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋转角度（以弧度为单位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的颜色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="400" src="/images/usa_flag.png" width="758"/><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_red_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    int originalWidth = 1200;
    int originalHeight = (int)(originalWidth * 2.0 / 3.0);
    gdImagePtr img = gdImageCreateTrueColor(originalWidth, originalHeight);
    gdImageAlphaBlending(img, 0);

    draw_japan_flag(img);

    // 新的宽度和高度以适应 "images" 文件夹
    int newWidth = 600;
    int newHeight = (int)(newWidth * 2.0 / 3.0);

    // 创建新图像并进行缩放
    gdImagePtr resizedImage = gdImageCreateTrueColor(newWidth, newHeight);
    gdImageAlphaBlending(resizedImage, 0);
    gdImageCopyResampled(resizedImage, img, 0, 0, 0, 0, newWidth, newHeight, originalWidth, originalHeight);

  FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePng(resizedImage, outputFile);
    fclose(outputFile);
    gdImageDestroy(img);
    gdImageDestroy(resizedImage);

    return 0;
}

void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    // 创建一个白色背景
    int white = gdImageColorAllocate(img, 255, 255, 255);
    gdImageFilledRectangle(img, 0, 0, width - 1, height - 1, white);

    // 绘制红色圆圈（太阳）
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int center_x = width / 2;
    int center_y = height / 2;
    int radius = (int)((width * 2) / 3);
    draw_red_sun(img, center_x, center_y, radius, red);
}

void draw_red_sun(gdImagePtr img, int x, int y, int size, int color) {
  // 減小 size 的值,例如將他的值減半
  size = size / 2;
    gdImageArc(img, x, y, size, size, 0, 360, color);
    gdImageFillToBorder(img, x, y, color, color);
}</pre>
<p><img alt="" height="400" src="/images/japan_flag.png" width="599"/><br/><br/></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/><br/><br/></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>